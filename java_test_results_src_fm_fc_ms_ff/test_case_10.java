/*
ArtifactUtil  public static String getLatestVersion(String gav) throws IOException  checkNotNull(gav); var coordinate = ParsedCoordinate.fromCoordinate(gav); String url = MAVEN_HOST + "/maven2/" + coordinate.groupId.replaceAll(".", "/") + "/" + coordinate.artifactId + "/maven-metadata.xml"; try (var in = new URL(url).openStream())  return XPathFactory.newDefaultInstance().newXPath().evaluate("/metadata/versioning/latest", DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(in));  catch (XPathExpressionException | SAXException | ParserConfigurationException e)  throw new IOException(e);   private ArtifactUtil(); static Path getArtifactFile(Path directory, String coordinates); static StreamPath> findArtifactFile(Path directory, String artifactId); static Path download(Path directory, String gav); @SuppressWarnings("deprecation") static boolean checkHash(Path directory, String gav); static String getLatestVersion(String gav);
*/

@Test public void testGetLatestVersion() throws Exception  String gav = "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/"); assertEquals("/maven2/"); assertEquals("/maven2/latest", ArtifactUtil.getLatestVersion("/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest", "/maven2/latest