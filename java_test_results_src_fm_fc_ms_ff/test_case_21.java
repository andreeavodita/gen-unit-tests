/*
JarUtil  public static boolean resourceExists(Path file, String resource) throws IOException  checkNotNull(resource); checkNotNull(file); if (!Files.exists(file)) throw new FileNotFoundException(); if (!resource.startsWith("/")) resource = "/" + resource; try (FileSystem fs = FileSystems.newFileSystem(file, (ClassLoader) null))  return Files.exists(fs.getPath(resource));  catch (ProviderNotFoundException e)  throw new IOException("Illegal file type");   private JarUtil(); static OptionalString> getManifestValue(Path file, String attribute); static OptionalString> getManifestValue(File file, String attribute); static Attributes getManifest(Path file); static Attributes getManifest(File file); static long getResourceSize(Path file, String resource); static long getResourceSize(File file, String resource); static URL getResourceUrl(Path file, String resource); static boolean resourceExists(Path file, String resource);
*/

@Test public void testResourceExists() throws IOException  File file = new FileSystems(); file.exists("/"); file.exists("//"); file.exists("//"); file.exists("//"); file.exists("//"); file.exists("//"); file.exists("//"); file.exists("//"); file.exists("//"); boolean resourceExists.resourceExists("//"); assertEquals("//"); assertEquals("//"); assertEquals("/////////////////////////////////"); assertEquals("//////////////////////"); assertEquals("///////////////"); assertEquals("/////////"); assertEquals("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////