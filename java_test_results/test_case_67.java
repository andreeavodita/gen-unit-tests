/*
@SuppressWarnings("unchecked") public static T extends Number> T convertNumberToTargetClass(Number number, ClassT> targetClass) throws IllegalArgumentException  if (targetClass.isInstance(number))  return (T) number;  else if (Byte.class == targetClass)  long value = checkedLongValue(number, targetClass); if (value  Byte.MIN_VALUE || value > Byte.MAX_VALUE)  raiseOverflowException(number, targetClass);  return (T) Byte.valueOf(number.byteValue());  else if (Short.class == targetClass)  long value = checkedLongValue(number, targetClass); if (value  Short.MIN_VALUE || value > Short.MAX_VALUE)  raiseOverflowException(number, targetClass);  return (T) Short.valueOf(number.shortValue());  else if (Integer.class == targetClass)  long value = checkedLongValue(number, targetClass); if (value  Integer.MIN_VALUE || value > Integer.MAX_VALUE)  raiseOverflowException(number, targetClass);  return (T) Integer.valueOf(number.intValue());  else if (Long.class == targetClass)  long value = checkedLongValue(number, targetClass); return (T) Long.valueOf(value);  else if (BigInteger.class == targetClass)  if (number instanceof BigDecimal)  return (T) ((BigDecimal) number).toBigInteger();  else  return (T) BigInteger.valueOf(number.longValue());   else if (
*/

@SuppressWarnings("unchecked") public void testOverflowException throws IllegalArgumentException  if (targetClass.isInstance("unchecked")); assertEquals("unchecked"));