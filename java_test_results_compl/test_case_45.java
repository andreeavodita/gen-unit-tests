/*
public void addUpdateCallback(ConsumerEV_FileListing> callback)  if (callback == null) throw new IllegalArgumentException(); callbacks.add(callback);
*/

AddUpdateCallback(ConsumerEV_FileList> callback = new AddUpdateCallback(callback); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals(callback = "callback"); assertEquals("callback"); assertEquals("callback"); assertEquals("callback"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals("illegalArgumentException"); assertEquals(